#Author: Sathish K Ganga

1) INTRODUCTION:

SERIALIZATION: The process of saving state of object to a file, strictly speaking the process of converting an object from java supported
form to file supported OR network supported form is called serialization.

DESERIALIZATION: The process of converting file supported OR network supported form to java supported form is called deserialization.

Classes used for serialization: FileOutputStream, ObjectOutputStream
Classes used for deserialization: FileInputStream, ObjectInputStream

Serializing class should implement "Serializable" interface. Serializable is a marker interface. If serializing class doesn't implement 
Serializable interface then there is no problem at compile time (It compiles fine), but at run time it throws exception:
java.io.NotSerializableException.

*Marker interface: If an interface doesn't contain any methods and by implementing that interface, if the object gets some ability,
such type of interface is called marker interface or ability interface or tag interface. By implementing Serializable interface, objects
can be saved to a file or can be transferred across a network.
NOTE: For marker interface, internally JVM is responsible to provide required ability to reduce complexity of programming and to make
java language as simple. To create our own marker interface, JVM has to be customized as per the requirement.

TRANSIENT keyword: It is a modifier which is applicable ONLY FOR VARIABLES. At the time of serialization if we don't want any particuler 
variable due to security reasons/constraints, such type of variable to be declared transient.
> At the time of serialization, JVM ignores the original value of transient variable and saves default value of the variable.
> Static variable will not participate in serialization as it is not object level variable. Hence there is no use of declaring
static variable as transient.
> Similarly, combining final keyword with transient is tricky. JVM won't save default value of variable as expected with transient and
it depends on the declaration of the variable. In general final variables are assigned with value during compile time only. Hence the 
value can not be changed. Hence it doesn't serve the purpose of transient.

NOTE: Serialization and deserialization of multiple objects to a single file SHOULD BE IN SAME ORDER. If we don't know the order of objects
in serialization, typecast based on instance type.
Example: Object o = ois.readObject();
         if(o instanceOf Dog) { ... }

--------------------------------------------------------------------------------------------------------------------------------------

2) OBJECT GRAPH IN SERIALIZATION:
When ever we are serializing an object, the set of all objects which are reachable from that object will be serialized automatically.
This group of objects that will be serialized is object graph in serialization.
NOTE: All the classes in graph should implement Serializable.

--------------------------------------------------------------------------------------------------------------------------------------

3) CUSTOMIZED SERIALIZATION:
In default serialization, there may be a chance of loss of information because of transient variables. To recover this loss of information
we should go for customized serialization concept.
Example: Suppose an object holds a password of a user, then due to security reasons if the password variable is made transient, then the
variable value will be saved/transferred as its default value. In order to recover the password, we can use encryption at sender side and
decryption at receiver side. Hence some extra work has to be done at sender and recever side (means during serialization and 
deserialization).
Define the extra work under the following methods:
During serialization: private void writeObject(ObjectOutputSteam oos) throws Exception
During deserialization: private void readObject(ObjectInputStream ois) throws Exception

NOTE: If any methods are executed automatically by JVM, they are called 'callback' methods. 
defaultWriteObject(), defaultReadObject() are meant for default serialization.

--------------------------------------------------------------------------------------------------------------------------------------

4) SERIALIZATION WITH RESPECT TO INHERITANCE
Case#1: Parent implements Serializable but not child: If the parent is serializable then automatically all child classes will implement
serializable by default eventhough child classes don't implement serializable explicitly.
Example: GenericServlet implements Serializable, hence all servlets implemets Serializable.

Case#2: Parent doesn't implement Serializable but child implements: 
> To serialize a child object, parent class need not be serializable. At the time of serialization, JVM checks is there exists any variable
coming from non serializable object, if any instance variable inheriting from non-serializable parent then JVM ignores original value and 
saves default value to the file.
> At the time of deserialization, JVM checks is any parent class is non-serializable or not. If parent class non-serializable then JVM will
execute instance control flow and share its instance variable values to current object.
> Instance control flow:
         > Identification of instance variables/members.
         > Execution of instance variable assignments and instance blocks.
         > Execution of constructor.
As part of instance flow execution JVM will always call default constructor or no-arg constructor of non-serializable parent. Hence every
non-serializable parent should compulsory contain no-arg constructor which may be a programmer provided or compiler generated default
constructor, otherwise we will get runtime exception saying 'InvalidClassException'.

--------------------------------------------------------------------------------------------------------------------------------------

5) EXTERNALIZATION
> In serialization everything will be taken care by JVM, programmer will not have any control.
> In serialization it is always possible to save total object to the file and it is not possible to save part of the object.
To overcome above problems, we should go for externalization.

> In externalization, everything is controlled by programmer, JVM won't have control. Note that relatively performance will be increased.
> To provide externalizability to any class, it compulsory should implement 'Externalizable' interface.
> As programmer is responsible to provide ability in externalization, the interface has two methods.
         1) writeExternal()
         2) readExternal()
> Externalizable is the child interface of Serializable only. Both were introdued in Java 1.1 version.
** In externalization, at the time of deserialization file doesn't contain total object. Thats why JVM will create a seperate new object and
on that object JVM will call readExternal() method. To create this new object, JVM will always call public no-arg constructor. So compulsory
externalizable object should have no-arg constructor which is either programmer provided or compiler generated, otherwise run time
exception 'invalidClassException' will appear.
** Transient keyword is not required in externalization. It won't play any role.

--------------------------------------------------------------------------------------------------------------------------------------

6) SerialversionUID
-> Sender and receiver need not be same.
-> Both sender and receiver need not be from same location.
-> Sender and receiver need not to use same machine (Sender may use Linux while receiver using Windows).
In serialization and deserialization '.class' file should be available on the sender machine and receiver machine at the beginning only.
Just state of the object will be travelling from sender to receiver. At the time of serialization for every object, sender side JVM will
save one generated unique identifier based on '.class' file. This is called SerialversionUID.

> There are several problems if we depend on default SerialversionUID generated by JVM.
Example: Suppose sender is using UNIX based 1.6 version JVM and generated UID - 101
         If receiver is using WINDOWS based 1.8 version JVM then there is no guarantee in generating same UID - 101
         In such case if any mismatch happens, run time exception 'InvalidClassExceptio' appears.
         
Hence the problems are,
> Both sender and receiver should use same JVM with respect to vendor and version.
> Both sender and receiver should use same .class file version.
> Performance problem: Internally JVM may use complex algorithm to generate UID.

** To overcome these problems, don't give chance to JVM to generate UID. Configure own UID.
Example: private static final long serialversionUID = 1L;

--------------------------------------------------------------------------------------------------------------------------------------
